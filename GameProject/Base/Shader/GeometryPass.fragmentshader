#version 330 core

//Input data
in vec3 vertexPosition_cameraspace;
in vec3 fragmentColor;
in vec3 vertexNormal_cameraspace;
in vec2 fragmentTextureCoord;

// Ouput data
layout (location = 0) out vec4 position_cameraspace;
layout (location = 1) out vec4 normal_cameraspace;
layout (location = 2) out vec4 ambientColor;
layout (location = 3) out vec4 diffuseColor;
layout (location = 4) out vec4 specularColor;
layout (location = 5) out vec4 emissiveColor;

struct Material {
	vec3 kAmbient;
	vec3 kDiffuse;
	vec3 kSpecular;
	vec3 kEmissive;
	float kShininess;
};

const int MAX_TEXTURES = 8;

uniform bool lightEnabled;
uniform Material material;
uniform bool textureEnabled[MAX_TEXTURES];
uniform sampler2D texture[MAX_TEXTURES];

void main() {
	position_cameraspace = vec4(vertexPosition_cameraspace, 1); //storing shadow visibility in position's alpha channel
	normal_cameraspace = vec4(normalize(vertexNormal_cameraspace), 1);

	//Get material color
	vec4 materialColor = vec4(0, 0, 0, 0);
	int textureCount = 0;
	for (int i = 0; i < MAX_TEXTURES; ++i)
	{
		if(textureEnabled[i])
		{
			materialColor += texture2D(texture[i], fragmentTextureCoord);
			++textureCount;
		}		
	}
	if (textureCount > 0)
		materialColor /= textureCount;
	else
		materialColor = vec4(fragmentColor, 1);

	// Color output
	if(lightEnabled == true)
	{
		ambientColor = vec4(materialColor.xyz * material.kAmbient, 1);
		diffuseColor = vec4(materialColor.xyz * material.kDiffuse, 1);
		specularColor = vec4(material.kSpecular, material.kShininess); //storing shininess in specular's alpha channel
		emissiveColor = vec4(materialColor.xyz * material.kEmissive, 1);
	}
	else
	{
		ambientColor = vec4(materialColor.xyz, 1);
		diffuseColor = vec4(0, 0, 0, 1);
		specularColor = vec4(0, 0, 0, 1);
		emissiveColor = vec4(0, 0, 0, 1);
	}
}